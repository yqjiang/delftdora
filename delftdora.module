<?php

/**
 * @file
 * Module used to house customizations for Delft University of Technology.
 */

/**
 * Implements hook_menu().
 */
function delftdora_menu() {
  return array(
    'admin/islandora/delftdora' => array(
      'title' => 'Delft Customizations',
      'description' => 'Configure behviours specific to Delft.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('delft_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function delftdora_theme() {
  return array(
    'delftdora_facets_block' => array(
      'file' => 'theme/theme.inc',
      'variables' => array('solr' => NULL),
    ),
    'delftdora_facets_block_facet_field' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/delftdora-facets-block-facet-field',
      'variables' => array(
        'solr' => NULL,
        'field' => NULL,
        'options' => array(),
      ),
    ),
    'delftdora_front_search_block' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(),
    ),
    'delftdora_find_on_map_block' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function delftdora_block_info() {
  return array(
    'delftdora_facets' => array(
      'info' => t('Delftdora Facets'),
      'cache' => DRUPAL_NO_CACHE,
      'status' => 1,
      'region' => 'sidebar_first',
    ),
    'delftdora_front_search' => array(
      'info' => t('Search (Deleft front page)'),
      'status' => 1,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'region' => 'content',
      'pages' => '<front>',
    ),
    'delftdora_find_on_map' => array(
      'info' => t('Find on Map'),
      'status' => 1,
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'region' => 'content',
    ),
    

  );
}

function delftdora_block_info_alter(&$blocks, $theme, $code_blocks) {
  switch ($theme) {
    case 'dtu_theme':
      if(isset($blocks['locale']['language'])) {
        $blocks['locale']['language']['region'] = 'navigation';
        $blocks['locale']['language']['status'] = 1;
      }
      break;
  }
  dsm($theme);
  dsm($blocks);
}

function delftdora_block_list_alter(&$blocks) {
  dsm($blocks);
}
/**
 * Implements hook_block_view().
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 */
function delftdora_block_view($block_name = '') {
  global $_islandora_solr_queryclass;
  $block = array();
  switch ($block_name) {
    case 'delftdora_facets':
      $block['subject'] = NULL;
      if (islandora_solr_results_page($_islandora_solr_queryclass) && user_access('search islandora solr')) {
        $block['content'] = array(
          '#theme' => 'delftdora_facets_block',
          '#solr' => $_islandora_solr_queryclass,
        );
      }
      break;
      
    case 'delftdora_front_search':
      $block['subject'] = NULL;
      $block['content'] = array(
        '#theme' => 'delftdora_front_search_block',
      );
      break;
    
    case 'delftdora_find_on_map':
      $block['subject'] = 'Find on Map';
      $block['content'] = array(
        '#theme' => 'delftdora_find_on_map_block',
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_islandora_required_objects().
 */
function delftdora_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'delftdora');

  // Delft Organization Model.
  $model_organization = $connection->repository->constructObject('model:Organization');
  $model_organization->owner = 'fedoraAdmin';
  $model_organization->label = 'Content model for Organization';
  $model_organization->models = 'fedora-system:ContentModel-3.0';
  $datastream = $model_organization->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/model_Organization/DS-COMPOSITE-MODEL.xml", FALSE);
  $model_organization->ingestDatastream($datastream);

  // Delft Building Model.
  $model_building = $connection->repository->constructObject('model:Building');
  $model_building->owner = 'fedoraAdmin';
  $model_building->label = 'Content model for Building';
  $model_building->models = 'fedora-system:ContentModel-3.0';
  $datastream = $model_building->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/model_Building/DS-COMPOSITE-MODEL.xml", FALSE);
  $model_building->ingestDatastream($datastream);

  // Delft Person Model.
  $model_person = $connection->repository->constructObject('model:Person');
  $model_person->owner = 'fedoraAdmin';
  $model_person->label = 'Content model for Person';
  $model_person->models = 'fedora-system:ContentModel-3.0';
  $datastream = $model_person->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/model_Person/DS-COMPOSITE-MODEL.xml", FALSE);
  $model_person->ingestDatastream($datastream);

  return array(
    'delftdora' => array(
      'title' => 'Delft',
      'objects' => array(
        $model_organization,
        $model_building,
        $model_person,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function delftdora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'delftdora');
  return array(
    'SFOAF organization 1' => array(
      'form_file' => "$module_path/data/forms/model_organization_form.xml",
    ),
    'SFOAF person 5' => array(
      'form_file' => "$module_path/data/forms/model_person_form.xml",
    ),
    'Building form 2' => array(
      'form_file' => "$module_path/data/forms/model_building_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function delftdora_islandora_xml_form_builder_form_associations() {
  return array(
    'model_Organization' => array(
      'content_model' => 'model:Organization',
      'form_name' => 'SFOAF organization 1',
      'dsid' => 'SFOAF',
      'title_field' => array('name'),
      'transform' => 'sfoaf_to_dc.xsl',
      'self_transform' => 'cleanup.SFOAF.xsl',
      'template' => FALSE,
    ),
    'model_Person' => array(
      'content_model' => 'model:Person',
      'form_name' => 'SFOAF person 5',
      'dsid' => 'SFOAF',
      'title_field' => array('name'),
      'transform' => 'sfoaf_to_dc.xsl',
      'self_transform' => 'cleanup.SFOAF.xsl',
      'template' => FALSE,
    ),
    'model_Building' => array(
      'content_model' => 'model:Building',
      'form_name' => 'Building form 2',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'cleanup.MODS.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function delftdora_model_Organization_islandora_ingest_steps() {
  return array(
    'islandora_basic_image' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_basic_image_image_upload_form',
      'module' => 'islandora_basic_image',
      'file' => 'includes/image_upload.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function delftdora_model_Building_islandora_ingest_steps() {
  return array(
    'islandora_basic_image' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_basic_image_image_upload_form',
      'module' => 'islandora_basic_image',
      'file' => 'includes/image_upload.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function delftdora_model_Person_islandora_ingest_steps() {
  return array(
    'islandora_basic_image' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_basic_image_image_upload_form',
      'module' => 'islandora_basic_image',
      'file' => 'includes/image_upload.form.inc',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function delftdora_model_Organization_islandora_object_ingested($object) {
  module_load_include('inc', 'islandora_basic_image', 'includes/derivatives');
  islandora_basic_image_create_all_derivatives($object);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function delftdora_model_Person_islandora_object_ingested($object) {
  module_load_include('inc', 'islandora_basic_image', 'includes/derivatives');
  islandora_basic_image_create_all_derivatives($object);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function delftdora_model_Building_islandora_object_ingested($object) {
  module_load_include('inc', 'islandora_basic_image', 'includes/derivatives');
  islandora_basic_image_create_all_derivatives($object);
}

/**
 * Process object for Delft customizations.
 *
 * @param FedoraObject $object
 *   The object to be modified with Delft custizations.
 */
function delftdora_process_object($object) {
  // Handle RELS-EXT replacement.
  $content_models = array();
  $rels = $object->relationships->get(FEDORA_MODEL_URI, 'hasModel');
  foreach ($rels as $rel) {
    $content_models[] = $rel['object']['value'];
  }
  $targets = variable_get('delftdora_rels_content_models', array());
  $shared = array_intersect($content_models, $targets);

  if (count($shared) > 0) {
    $fedora_url = variable_get('islandora_base_url', 'http://localhost:8080/fedora');
    $pid = $object->id;
    $sdef_url = "$fedora_url/objects/$pid/methods/sdef:makeDS/RELS-EXT";
    $new_rels = file_get_contents($sdef_url);
    if ($new_rels) {
      $object['RELS-EXT']->content = $new_rels;
    }
  }

  // Handle batchModify cron setup.
  $batch_modify_cmodels = variable_get('delft_batch_modify_cmodels', array());
  foreach ($batch_modify_cmodels as $bm_model) {
    if (in_array($bm_model['cmodel'], $content_models)) {
      $db_object = new stdClass();
      $db_object->ingested_pid = $object->id;

      db_merge('delftdora_ingested_pids')
        ->key(array('ingested_pid' => $object->id))
        ->fields(array(
          'processed' => NULL,
        ))
        ->execute();
      break;
    }
  }
}

/**
 * Implements hook_islandora_object_alter().
 */
function delftdora_islandora_object_ingested($object) {
  delftdora_process_object($object);
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function delftdora_islandora_datastream_alter($object, $datastream, &$context) {
  if ($context['action'] == 'modify' || $context['action'] == 'ingest') {
    delftdora_process_object($object);
  }
}

/**
 * Implements hook_cron().
 */
function delftdora_cron() {
  // Gets all unprocessed pids.
  $pids_to_process = db_select('delftdora_ingested_pids', 'd')
    ->fields('d', array('ingested_pid'))
    ->condition('processed', NULL, 'IS')
    ->execute()
    ->fetchAllAssoc('ingested_pid');

  foreach ($pids_to_process as $pid) {
    $pid = $pid->ingested_pid;
    $result = delftdora_batch_modify($pid);
    if ($result) {
      $num_deleted = db_delete('delftdora_ingested_pids')
        ->condition('ingested_pid', $pid)
        ->execute();
    }
  }
}

/**
 * Execute a Fedora batchModify operation.
 */
function delftdora_batch_modify($pid) {
  $return = TRUE;

  $object = islandora_object_load($pid);
  if (!$object) {
    return $return;
  }

  $fedora_url = variable_get('islandora_base_url', 'http://localhost:8080/fedora');
  $fedora_disseminator = "$fedora_url/objects/$pid/methods/";
  $path_parts = parse_url($fedora_url);
  $host = $path_parts['host'] . ':' . $path_parts['port'];
  $delft_temp_dir = 'delft_input';
  $directory = 'public://' . $delft_temp_dir;
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $executable_path = variable_get('delftdora_fedora_path', '/usr/local/fedora/client/bin');
  $user = 'fedoraAdmin';
  $password = variable_get('delftdora_fedora_password', '');
  // We have been unable to find a working logging path.
  $log_filepath = "/tmp/batch.log";
  $protocol = 'http';
  $execute_directives = 'exec';
  $context = 'fedora';

  $content_models = array();
  $rels = $object->relationships->get(FEDORA_MODEL_URI, 'hasModel');
  foreach ($rels as $rel) {
    $content_models[] = $rel['object']['value'];
  }

  $batch_modify_cmodels = variable_get('delft_batch_modify_cmodels', array());
  foreach ($batch_modify_cmodels as $bm_model) {
    if (in_array($bm_model['cmodel'], $content_models)) {
      $disseminator_content = file_get_contents($fedora_disseminator . $bm_model['sdef'] . '/' . $bm_model['method']);
      if ($disseminator_content != '<null/>') {
        $disseminator_file = file_save_data($disseminator_content, $directory);
        $disseminator_filepath = drupal_realpath($disseminator_file->uri);

        $output = array();
        exec("bash -c \"export FEDORA_HOME='/usr/local/fedora'; $executable_path/fedora-modify.sh $host $user $password $disseminator_filepath $log_filepath $protocol $execute_directives $context\"", $output);
        file_delete($disseminator_file);
        if (empty($output)) {
          $return = FALSE;
          watchdog('delft', 'Error running batchModify for @pid with @disseminator',
            array('@pid' => $pid, '@disseminator' => $bm_model['sdef'] . '/' . $bm_model['method'])
          );
        }
      }
    }
  }

  return $return;
}

/**
 * Implements hook_xml_form_builder_get_self_transforms().
 *
 * Grabs any XSLTs from the "self_transforms" directory inside of this module.
 */
function delftdora_xml_form_builder_get_self_transforms() {
  $path = drupal_get_path('module', 'delftdora');
  $transforms = array();
  $include_path = "$path/self_transforms";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.xslt?$/', $file)) {
        $transforms["$file"] = "$include_path/$file";
      }
    }
  }
  closedir($dir);
  return $transforms;
}

/**
 * Implements hook_xml_form_builder_get_transforms().
 *
 * Grabs any XSLTs from the "transforms" directory inside of this module.
 */
function delftdora_xml_form_builder_get_transforms() {
  $p = drupal_get_path('module', 'delftdora');
  $transforms = array();
  $include_path = "$p/transforms";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.xslt?$/', $file)) {
        $transforms["$file"] = "$include_path/$file";
      }
    }
  }
  closedir($dir);
  return $transforms;
}

/**
 * Implements hook_menu_alter().
 */
function delftdora_menu_alter(&$items) {
  $items['user']['page callback'] = 'delftdora_user_page';
  $items['user']['file'] = 'includes/user.page.inc';
  $items['user']['file path'] = drupal_get_path('module', 'delftdora');

  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function delftdora_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Sign in');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function delftdora_form_user_register_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Submit');
}
